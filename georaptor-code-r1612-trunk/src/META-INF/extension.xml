<?xml version = '1.0' encoding = 'UTF-8'?>
<extension xmlns="http://jcp.org/jsr/198/extension-manifest"
              id="org.GeoRaptor" 
         version="18.1" 
    esdk-version="1.0"
  rsbundle-class="org.GeoRaptor.resource.Res">
  <name>GeoRaptor</name>
  <owner>GeoRaptor Development Team at SourceForge</owner>

     <feature id="oracle.db.example.sqldeveloper.extension.dumpObjectTypes" xmlns="http://xmlns.oracle.com/ide/extension">
        <name>${EXTENSION_NAME}</name>
        <description>${DESCRIPTION}</description>
        <type>
            <service can-user-disable="true" reload-if-used="true"/>
        </type>
    </feature>
  	<trigger-hooks xmlns="http://xmlns.oracle.com/ide/extension">
        <rules>
			<!--  Object, not folder TODO: Make our own RuleFunction to check all elements? -->
			<rule id="context-has-object-node" type="context-has-element">
				<parameters>
					<param name="element-class" value="oracle.dbtools.raptor.navigator.impl.ObjectNode"/>
				</parameters>
			</rule>
			<composite-rule id="context-has-object-node(s)">
				<and>
					<!-- Don't really need this, just showing composite and how to specify
					     multiple/single selection constraints -->
					<or>
						<rule-reference id="on-multiple-selection"/>
						<rule-reference id="on-single-selection"/>
					</or>
					<rule-reference id="context-has-object-node"/>
				</and>
			</composite-rule>
        </rules>
   		<triggers xmlns:c="http://xmlns.oracle.com/ide/customization">
			<actions xmlns="http://xmlns.oracle.com/jdeveloper/1013/extension">
				<action id="GeoRaptor.SHOW_MENU">
					<properties>
						<property name="Name">GeoRaptor</property>
						<!-- You could also use your own by putting path in rsbundle 
						     e.g., MY_ICON = /oracle/db/example/sqldeveloper/extension/dependency/icons/my_icon.png
						     and referencing its key as res:${MY_ICON} -->
						<property name="SmallIcon">${ICON}</property>
					</properties>
				</action>
			</actions>
			<controllers xmlns="http://xmlns.oracle.com/ide/extension">
				<controller class="org.GeoRaptor.MenuController">
				<!-- Not needed if the context-menu-hook is using a rule to determine if it shows up at all? -->
					<update-rules>
						<update-rule rule="context-has-object-node(s)">
							<action id="GeoRaptor.SHOW_MENU"/>
						</update-rule>
					</update-rules>
				</controller>
			</controllers>
			<context-menu-hook rule="context-has-object-node(s)">
				<site idref="db_nav"/>
				<menu>
					<section xmlns="http://jcp.org/jsr/198/extension-manifest" id="SECTION_WINDOW_CTXT_MENU" weight="1.0">
						<item action-ref="GeoRaptor.SHOW_MENU" weight="1.0"/>
					</section>
				</menu>
			</context-menu-hook>

			<!--  When placed here in the trigger-hooks section, these will be loaded right away -->
			<sqldev-action-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-actions">
			    <!-- This is the directory to read all action *.xml from
				<actionDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.action"/>
				-->
			</sqldev-action-hook>
	        <sqldev-navigator-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-navigator">
	            <!--  These are the navigator XML files to read
	            <descriptor>/oracle/db/example/sqldeveloper/extension/dependency/navigator/DependencyExampleNavigator.xml</descriptor>
	             -->
	        </sqldev-navigator-hook>
	        <!-- viewer-hook cannot be a trigger -->
	        <!-- BUT doing this will add a menu toggle entry in the connection
	             context menu for Manage Features->your feature for users to
	             enable/disable xml based things with requiredFeatures="your dynamic id"
	             See oracle.db.example.sqldeveloper.extension.dependency.viewer.DependencyExampleGraphViewer.xml
	             AS A SIDE EFFECT, enabling it the 1st time will fully load the extension  
	         -->
	         <!-- Need to check on this. Works in current dev version, but not EA1.
	         SO FOR NOW, you have to use the context menu show viewer once then object viewers 
	         opened afterwards will have the dependency viewer tab -->
	        <!--  
			<sqldev-feature-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-feature">
	        	<dynamicFeature id="dependencyObjectViewerExample">${DEPENDENCY_VIEWER_TAB_LABEL}</dynamicFeature>
	        </sqldev-feature-hook>
	         -->
   		</triggers>
   	</trigger-hooks>
  <hooks>
     <jdeveloper-hook xmlns="http://xmlns.oracle.com/jdeveloper/1013/extension"> 
            <addins>
            <!-- 
            	<addin>oracle.db.example.sqldeveloper.extension.dumpObjectTypes.DumpObjectTypesAddin</addin>
            -->
    		</addins>
		</jdeveloper-hook> 
		<!-- When placed here in the hooks section, these won't be loaded until the extension is by one of the above triggers --> 
		<sqldev-action-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-actions">
		    <!-- This is the directory to read all action *.xml from
			<actionDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.action.xml"/>
			  -->
		</sqldev-action-hook>
        <sqldev-navigator-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-navigator">
            <!--  These are the navigator XML files to read
            <descriptor>oracle.db.example.sqldeveloper.extension.dependency/navigator/DependencyExampleNavigator.xml</descriptor>
             -->
        </sqldev-navigator-hook>
        <!-- viewer-hook cannot be a trigger -->
		<sqldev-viewer-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-viewers">
		    <!-- This is the directory to read all viewer *.xml from
			<viewerDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.viewer"/>
			-->
		</sqldev-viewer-hook>
  </hooks>

</extension>

